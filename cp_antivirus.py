# -*- coding: utf-8 -*-
"""CP_AntiVirus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p9trQDlvf2YFxtaj859MTfG8t_2_t4EX

Arthur Oliveira – rm89187

Gabriel Bega – rm87442

Gabriel Pionte – rm84539

Gustavo Tachira – rm88197

Laura Giancoli – rm87194

Matheus Lambert – rm87079

Nickolas Pereira -  rm88103
"""

'''
Você e sua equipe devem criar uma base de dados para treinar algoritmos de ML para a detecção de vírus.A base de dados deve conter features (fingerprints) de arquivos  de  vírus  e  de  arquivos legítimos.
'''

import pandas as pd
from sklearn.datasets import fetch_openml
dados = fetch_openml(data_id=43527)

dados

df_dados = pd.DataFrame(data = dados.data, columns=dados.feature_names)
df_dados.head()

df_dados.info()

df_dados.sample(frac=0.4)

df_dados.head()

from sklearn.model_selection import train_test_split
x = df_dados.drop(columns = ['malware']) # Colunas descritivas
y = df_dados['malware']                # Valor alvo

# Dividindo conjunto de treinamento e conjunto de teste
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42, stratify=y)

from sklearn.preprocessing import StandardScaler, MinMaxScaler # Importando o Escalonador
scaler = MinMaxScaler()
#Treinando o escalonador

scaler.fit(x_train)
# Usando o escalonador treinado para transformar os dados
x_train_scaled = scaler.transform(x_train)

x_test_scaled = scaler.transform(x_test)

#KNN Classificador
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=i)  # Criamos o objeto do classificador (não mudamos nenhum hiperpârametro)

clf.fit(x_train_scaled, y_train) # Treinamos o classificador passando apenas o conjunto de dados de treinamento

#Classificador Random Forest 
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=0)
clf.fit(x_train_scaled, y_train)

#Classificador SVC
from sklearn.svm import SVC
clf = SVC()
clf.fit(x_train_scaled, y_train)

#Classificador LDA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
clf = LinearDiscriminantAnalysis()
clf.fit(x_train_scaled, y_train)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, plot_confusion_matrix,classification_report
from sklearn.metrics import cohen_kappa_score, roc_auc_score, roc_curve
# Perceba que estamos passando apenas o x de teste, afinal o algoritmo é que nos dira qual é o y 
y_predicoes = clf.predict(x_test_scaled)

import matplotlib.pyplot as plt  
import seaborn as sns
matriz_confusao = confusion_matrix(y_true = y_test,
                                   y_pred = y_predicoes)

# plotando uma figura com a matriz de confusao
figure = plt.figure(figsize=(15, 5))
disp = ConfusionMatrixDisplay(confusion_matrix = matriz_confusao)
disp.plot(values_format='d')

# Metricas de precisão, revocação, f1-score e acurácia.
print(classification_report(y_test, y_predicoes))